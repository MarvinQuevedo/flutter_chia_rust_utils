// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.81.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'package:collection/collection.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'bridge_generated.io.dart'
    if (dart.library.html) 'bridge_generated.web.dart';

abstract class Rust {
  Future<Uint8List> secretKeyFromSeed({required Uint8List seed, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSecretKeyFromSeedConstMeta;

  Future<Uint8List> secretKeyPublicKey({required Uint8List sk, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSecretKeyPublicKeyConstMeta;

  Future<Uint8List> secretKeyDerivePathHardened(
      {required Uint8List sk, required Uint32List path, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSecretKeyDerivePathHardenedConstMeta;

  Future<Uint8List> secretKeyDerivePathUnhardened(
      {required Uint8List sk, required Uint32List path, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSecretKeyDerivePathUnhardenedConstMeta;

  Future<Uint8List> publicKeyDerivePathUnhardened(
      {required Uint8List sk, required Uint32List path, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPublicKeyDerivePathUnhardenedConstMeta;

  Future<Uint8List> signatureSign(
      {required Uint8List sk, required Uint8List msg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignatureSignConstMeta;

  Future<bool> signatureIsValid({required Uint8List sig, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignatureIsValidConstMeta;

  Future<Uint8List> signatureAggregate(
      {required Uint8List sigsStream, required int length, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignatureAggregateConstMeta;

  Future<bool> signatureVerify(
      {required Uint8List pk,
      required Uint8List msg,
      required Uint8List sig,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignatureVerifyConstMeta;

  Future<Uint8List> pubMnemonicToEntropy(
      {required String mnemonicWords, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPubMnemonicToEntropyConstMeta;

  Future<String> pubEntropyToMnemonic(
      {required Uint8List entropy, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPubEntropyToMnemonicConstMeta;

  Future<Uint8List> pubEntropyToSeed(
      {required Uint8List entropy, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPubEntropyToSeedConstMeta;

  Future<String> bytesToHex({required Uint8List bytes, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kBytesToHexConstMeta;

  Future<Uint8List> hexToBytes({required String hex, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHexToBytesConstMeta;

  Future<Uint8List> bytesToSha256({required Uint8List bytes, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kBytesToSha256ConstMeta;

  Future<Uint8List> pubMasterToWalletUnhardenedIntermediate(
      {required Uint8List master, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kPubMasterToWalletUnhardenedIntermediateConstMeta;

  Future<Uint8List> pubMasterToWalletUnhardened(
      {required Uint8List master, required int idx, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPubMasterToWalletUnhardenedConstMeta;

  Future<Uint8List> pubMasterToWalletHardenedIntermediate(
      {required Uint8List master, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kPubMasterToWalletHardenedIntermediateConstMeta;

  Future<Uint8List> pubMasterToWalletHardened(
      {required Uint8List master, required int idx, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPubMasterToWalletHardenedConstMeta;

  Future<Uint8List> pubMasterToPoolSingleton(
      {required Uint8List master, required int poolWalletIdx, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPubMasterToPoolSingletonConstMeta;

  Future<Uint8List> pubMasterToPoolAuthentication(
      {required Uint8List sk,
      required int poolWalletIdx,
      required int idx,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPubMasterToPoolAuthenticationConstMeta;

  Future<String> cmdsProgramRun({required List<String> args, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCmdsProgramRunConstMeta;

  Future<String> cmdsProgramBrun({required List<String> args, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCmdsProgramBrunConstMeta;

  Future<List<String>> cmdProgramOpc(
      {required List<String> args, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCmdProgramOpcConstMeta;

  Future<List<String>> cmdProgramOpd(
      {required List<String> args, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCmdProgramOpdConstMeta;

  Future<U8Array32> programTreeHash(
      {required Uint8List serProgramBytes, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kProgramTreeHashConstMeta;

  Future<Uint8List> programCurry(
      {required Uint8List serProgramBytes,
      required List<String> argsStr,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kProgramCurryConstMeta;

  Future<UncurriedProgramToDart> programUncurry(
      {required Uint8List serProgramBytes, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kProgramUncurryConstMeta;

  Future<Uint8List> programFromList(
      {required List<String> programList, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kProgramFromListConstMeta;

  Future<String> programDisassemble(
      {required Uint8List serProgramBytes, int? version, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kProgramDisassembleConstMeta;

  Future<ApiOutputProgram> programRun(
      {required Uint8List serProgramBytes,
      required List<String> argsStr,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kProgramRunConstMeta;

  Future<Uint8List> programFromAtomBytes(
      {required Uint8List serProgramBytes, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kProgramFromAtomBytesConstMeta;

  Future<Uint8List> programToAtomBytes(
      {required Uint8List serProgramBytes, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kProgramToAtomBytesConstMeta;

  Future<Uint8List> getPuzzleFromPublicKey(
      {required Uint8List pk, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetPuzzleFromPublicKeyConstMeta;

  Future<Uint8List> catsCreateCatPuzzle(
      {required Uint8List tailHash,
      required Uint8List innerPuzzleHash,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCatsCreateCatPuzzleConstMeta;
}

class ApiOutputProgram {
  final Uint8List program;
  final int cost;

  const ApiOutputProgram({
    required this.program,
    required this.cost,
  });
}

class U8Array32 extends NonGrowableListView<int> {
  static const arraySize = 32;
  U8Array32(Uint8List inner)
      : assert(inner.length == arraySize),
        super(inner);
  U8Array32.unchecked(Uint8List inner) : super(inner);
  U8Array32.init() : super(Uint8List(arraySize));
}

class UncurriedProgramToDart {
  final Uint8List program;
  final List<String> args;
  final String error;

  const UncurriedProgramToDart({
    required this.program,
    required this.args,
    required this.error,
  });
}

class RustImpl implements Rust {
  final RustPlatform _platform;
  factory RustImpl(ExternalLibrary dylib) => RustImpl.raw(RustPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory RustImpl.wasm(FutureOr<WasmModule> module) =>
      RustImpl(module as ExternalLibrary);
  RustImpl.raw(this._platform);
  Future<Uint8List> secretKeyFromSeed({required Uint8List seed, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(seed);
    return _platform.executeNormal(
      FlutterRustBridgeTask(
        callFfi: (port_) =>
            _platform.inner.wire_secret_key_from_seed(port_, arg0),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kSecretKeyFromSeedConstMeta,
        argValues: [seed],
        hint: hint,
        parseErrorData: (v) {
          return Null;
        },
      ),
    );
  }

  FlutterRustBridgeTaskConstMeta get kSecretKeyFromSeedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "secret_key_from_seed",
        argNames: ["seed"],
      );

  Future<Uint8List> secretKeyPublicKey({required Uint8List sk, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(sk);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_secret_key_public_key(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kSecretKeyPublicKeyConstMeta,
      argValues: [sk],
      hint: hint,
      parseErrorData: (v) {
        return Null;
      },
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSecretKeyPublicKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "secret_key_public_key",
        argNames: ["sk"],
      );

  Future<Uint8List> secretKeyDerivePathHardened(
      {required Uint8List sk, required Uint32List path, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(sk);
    var arg1 = _platform.api2wire_uint_32_list(path);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_secret_key_derive_path_hardened(port_, arg0, arg1),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kSecretKeyDerivePathHardenedConstMeta,
      argValues: [sk, path],
      hint: hint,
      parseErrorData: (v) {
        return Null;
      },
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSecretKeyDerivePathHardenedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "secret_key_derive_path_hardened",
        argNames: ["sk", "path"],
      );

  Future<Uint8List> secretKeyDerivePathUnhardened(
      {required Uint8List sk, required Uint32List path, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(sk);
    var arg1 = _platform.api2wire_uint_32_list(path);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_secret_key_derive_path_unhardened(port_, arg0, arg1),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kSecretKeyDerivePathUnhardenedConstMeta,
      argValues: [sk, path],
      hint: hint,
      parseErrorData: (v) {
        return Null;
      },
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSecretKeyDerivePathUnhardenedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "secret_key_derive_path_unhardened",
        argNames: ["sk", "path"],
      );

  Future<Uint8List> publicKeyDerivePathUnhardened(
      {required Uint8List sk, required Uint32List path, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(sk);
    var arg1 = _platform.api2wire_uint_32_list(path);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_public_key_derive_path_unhardened(port_, arg0, arg1),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kPublicKeyDerivePathUnhardenedConstMeta,
      argValues: [sk, path],
      hint: hint,
      parseErrorData: (v) {
        return Null;
      },
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPublicKeyDerivePathUnhardenedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "public_key_derive_path_unhardened",
        argNames: ["sk", "path"],
      );

  Future<Uint8List> signatureSign(
      {required Uint8List sk, required Uint8List msg, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(sk);
    var arg1 = _platform.api2wire_uint_8_list(msg);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_signature_sign(port_, arg0, arg1),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kSignatureSignConstMeta,
      argValues: [sk, msg],
      hint: hint,
      parseErrorData: (v) {
        return Null;
      },
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSignatureSignConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "signature_sign",
        argNames: ["sk", "msg"],
      );

  Future<bool> signatureIsValid({required Uint8List sig, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(sig);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_signature_is_valid(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kSignatureIsValidConstMeta,
      argValues: [sig],
      hint: hint,
      parseErrorData: (v) {
        return Null;
      },
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSignatureIsValidConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "signature_is_valid",
        argNames: ["sig"],
      );

  Future<Uint8List> signatureAggregate(
      {required Uint8List sigsStream, required int length, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(sigsStream);
    var arg1 = api2wire_usize(length);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_signature_aggregate(port_, arg0, arg1),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kSignatureAggregateConstMeta,
      argValues: [sigsStream, length],
      hint: hint,
      parseErrorData: (v) {
        return Null;
      },
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSignatureAggregateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "signature_aggregate",
        argNames: ["sigsStream", "length"],
      );

  Future<bool> signatureVerify(
      {required Uint8List pk,
      required Uint8List msg,
      required Uint8List sig,
      dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(pk);
    var arg1 = _platform.api2wire_uint_8_list(msg);
    var arg2 = _platform.api2wire_uint_8_list(sig);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_signature_verify(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_bool,
      constMeta: kSignatureVerifyConstMeta,
      argValues: [pk, msg, sig],
      hint: hint,
      parseErrorData: (v) {
        return Null;
      },
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSignatureVerifyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "signature_verify",
        argNames: ["pk", "msg", "sig"],
      );

  Future<Uint8List> pubMnemonicToEntropy(
      {required String mnemonicWords, dynamic hint}) {
    var arg0 = _platform.api2wire_String(mnemonicWords);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_pub_mnemonic_to_entropy(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kPubMnemonicToEntropyConstMeta,
      argValues: [mnemonicWords],
      hint: hint,
      parseErrorData: (v) {
        return Null;
      },
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPubMnemonicToEntropyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "pub_mnemonic_to_entropy",
        argNames: ["mnemonicWords"],
      );

  Future<String> pubEntropyToMnemonic(
      {required Uint8List entropy, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(entropy);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_pub_entropy_to_mnemonic(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kPubEntropyToMnemonicConstMeta,
      argValues: [entropy],
      hint: hint,
      parseErrorData: (v) {
        return Null;
      },
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPubEntropyToMnemonicConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "pub_entropy_to_mnemonic",
        argNames: ["entropy"],
      );

  Future<Uint8List> pubEntropyToSeed(
      {required Uint8List entropy, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(entropy);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_pub_entropy_to_seed(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kPubEntropyToSeedConstMeta,
      argValues: [entropy],
      hint: hint,
      parseErrorData: (v) {
        return Null;
      },
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPubEntropyToSeedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "pub_entropy_to_seed",
        argNames: ["entropy"],
      );

  Future<String> bytesToHex({required Uint8List bytes, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(bytes);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_bytes_to_hex(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kBytesToHexConstMeta,
      argValues: [bytes],
      hint: hint,
      parseErrorData: (v) {
        return Null;
      },
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBytesToHexConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "bytes_to_hex",
        argNames: ["bytes"],
      );

  Future<Uint8List> hexToBytes({required String hex, dynamic hint}) {
    var arg0 = _platform.api2wire_String(hex);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_hex_to_bytes(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kHexToBytesConstMeta,
      argValues: [hex],
      hint: hint,
      parseErrorData: (v) {
        return Null;
      },
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHexToBytesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "hex_to_bytes",
        argNames: ["hex"],
      );

  Future<Uint8List> bytesToSha256({required Uint8List bytes, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(bytes);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_bytes_to_sha256(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kBytesToSha256ConstMeta,
      argValues: [bytes],
      hint: hint,
      parseErrorData: (v) {
        return Null;
      },
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBytesToSha256ConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "bytes_to_sha256",
        argNames: ["bytes"],
      );

  Future<Uint8List> pubMasterToWalletUnhardenedIntermediate(
      {required Uint8List master, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(master);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_pub_master_to_wallet_unhardened_intermediate(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kPubMasterToWalletUnhardenedIntermediateConstMeta,
      argValues: [master],
      hint: hint,
      parseErrorData: (v) {
        return Null;
      },
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kPubMasterToWalletUnhardenedIntermediateConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "pub_master_to_wallet_unhardened_intermediate",
            argNames: ["master"],
          );

  Future<Uint8List> pubMasterToWalletUnhardened(
      {required Uint8List master, required int idx, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(master);
    var arg1 = api2wire_u32(idx);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_pub_master_to_wallet_unhardened(port_, arg0, arg1),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kPubMasterToWalletUnhardenedConstMeta,
      argValues: [master, idx],
      hint: hint,
      parseErrorData: (v) {
        return Null;
      },
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPubMasterToWalletUnhardenedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "pub_master_to_wallet_unhardened",
        argNames: ["master", "idx"],
      );

  Future<Uint8List> pubMasterToWalletHardenedIntermediate(
      {required Uint8List master, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(master);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_pub_master_to_wallet_hardened_intermediate(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kPubMasterToWalletHardenedIntermediateConstMeta,
      argValues: [master],
      hint: hint,
      parseErrorData: (v) {
        return Null;
      },
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kPubMasterToWalletHardenedIntermediateConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "pub_master_to_wallet_hardened_intermediate",
            argNames: ["master"],
          );

  Future<Uint8List> pubMasterToWalletHardened(
      {required Uint8List master, required int idx, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(master);
    var arg1 = api2wire_u32(idx);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_pub_master_to_wallet_hardened(port_, arg0, arg1),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kPubMasterToWalletHardenedConstMeta,
      argValues: [master, idx],
      hint: hint,
      parseErrorData: (v) {
        return Null;
      },
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPubMasterToWalletHardenedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "pub_master_to_wallet_hardened",
        argNames: ["master", "idx"],
      );

  Future<Uint8List> pubMasterToPoolSingleton(
      {required Uint8List master, required int poolWalletIdx, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(master);
    var arg1 = api2wire_u32(poolWalletIdx);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_pub_master_to_pool_singleton(port_, arg0, arg1),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kPubMasterToPoolSingletonConstMeta,
      argValues: [master, poolWalletIdx],
      hint: hint,
      parseErrorData: (v) {
        return Null;
      },
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPubMasterToPoolSingletonConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "pub_master_to_pool_singleton",
        argNames: ["master", "poolWalletIdx"],
      );

  Future<Uint8List> pubMasterToPoolAuthentication(
      {required Uint8List sk,
      required int poolWalletIdx,
      required int idx,
      dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(sk);
    var arg1 = api2wire_u32(poolWalletIdx);
    var arg2 = api2wire_u32(idx);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_pub_master_to_pool_authentication(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kPubMasterToPoolAuthenticationConstMeta,
      argValues: [sk, poolWalletIdx, idx],
      hint: hint,
      parseErrorData: (v) {
        return Null;
      },
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPubMasterToPoolAuthenticationConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "pub_master_to_pool_authentication",
        argNames: ["sk", "poolWalletIdx", "idx"],
      );

  Future<String> cmdsProgramRun({required List<String> args, dynamic hint}) {
    var arg0 = _platform.api2wire_StringList(args);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_cmds_program_run(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kCmdsProgramRunConstMeta,
      argValues: [args],
      hint: hint,
      parseErrorData: (v) {
        return Null;
      },
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCmdsProgramRunConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "cmds_program_run",
        argNames: ["args"],
      );

  Future<String> cmdsProgramBrun({required List<String> args, dynamic hint}) {
    var arg0 = _platform.api2wire_StringList(args);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_cmds_program_brun(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kCmdsProgramBrunConstMeta,
      argValues: [args],
      hint: hint,
      parseErrorData: (v) {
        return Null;
      },
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCmdsProgramBrunConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "cmds_program_brun",
        argNames: ["args"],
      );

  Future<List<String>> cmdProgramOpc(
      {required List<String> args, dynamic hint}) {
    var arg0 = _platform.api2wire_StringList(args);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_cmd_program_opc(port_, arg0),
      parseSuccessData: _wire2api_StringList,
      constMeta: kCmdProgramOpcConstMeta,
      argValues: [args],
      hint: hint,
      parseErrorData: (v) {
        return Null;
      },
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCmdProgramOpcConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "cmd_program_opc",
        argNames: ["args"],
      );

  Future<List<String>> cmdProgramOpd(
      {required List<String> args, dynamic hint}) {
    var arg0 = _platform.api2wire_StringList(args);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_cmd_program_opd(port_, arg0),
      parseSuccessData: _wire2api_StringList,
      constMeta: kCmdProgramOpdConstMeta,
      argValues: [args],
      hint: hint,
      parseErrorData: (v) {
        return Null;
      },
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCmdProgramOpdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "cmd_program_opd",
        argNames: ["args"],
      );

  Future<U8Array32> programTreeHash(
      {required Uint8List serProgramBytes, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(serProgramBytes);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_program_tree_hash(port_, arg0),
      parseSuccessData: _wire2api_u8_array_32,
      constMeta: kProgramTreeHashConstMeta,
      argValues: [serProgramBytes],
      hint: hint,
      parseErrorData: (v) {
        return Null;
      },
    ));
  }

  FlutterRustBridgeTaskConstMeta get kProgramTreeHashConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "program_tree_hash",
        argNames: ["serProgramBytes"],
      );

  Future<Uint8List> programCurry(
      {required Uint8List serProgramBytes,
      required List<String> argsStr,
      dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(serProgramBytes);
    var arg1 = _platform.api2wire_StringList(argsStr);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_program_curry(port_, arg0, arg1),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kProgramCurryConstMeta,
      argValues: [serProgramBytes, argsStr],
      hint: hint,
      parseErrorData: (v) {
        return Null;
      },
    ));
  }

  FlutterRustBridgeTaskConstMeta get kProgramCurryConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "program_curry",
        argNames: ["serProgramBytes", "argsStr"],
      );

  Future<UncurriedProgramToDart> programUncurry(
      {required Uint8List serProgramBytes, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(serProgramBytes);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_program_uncurry(port_, arg0),
      parseSuccessData: _wire2api_uncurried_program_to_dart,
      constMeta: kProgramUncurryConstMeta,
      argValues: [serProgramBytes],
      hint: hint,
      parseErrorData: (v) {
        return Null;
      },
    ));
  }

  FlutterRustBridgeTaskConstMeta get kProgramUncurryConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "program_uncurry",
        argNames: ["serProgramBytes"],
      );

  Future<Uint8List> programFromList(
      {required List<String> programList, dynamic hint}) {
    var arg0 = _platform.api2wire_StringList(programList);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_program_from_list(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kProgramFromListConstMeta,
      argValues: [programList],
      hint: hint,
      parseErrorData: (v) {
        return Null;
      },
    ));
  }

  FlutterRustBridgeTaskConstMeta get kProgramFromListConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "program_from_list",
        argNames: ["programList"],
      );

  Future<String> programDisassemble(
      {required Uint8List serProgramBytes, int? version, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(serProgramBytes);
    var arg1 = _platform.api2wire_opt_box_autoadd_usize(version);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_program_disassemble(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kProgramDisassembleConstMeta,
      argValues: [serProgramBytes, version],
      hint: hint,
      parseErrorData: (v) {
        return Null;
      },
    ));
  }

  FlutterRustBridgeTaskConstMeta get kProgramDisassembleConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "program_disassemble",
        argNames: ["serProgramBytes", "version"],
      );

  Future<ApiOutputProgram> programRun(
      {required Uint8List serProgramBytes,
      required List<String> argsStr,
      dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(serProgramBytes);
    var arg1 = _platform.api2wire_StringList(argsStr);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_program_run(port_, arg0, arg1),
      parseSuccessData: _wire2api_api_output_program,
      constMeta: kProgramRunConstMeta,
      argValues: [serProgramBytes, argsStr],
      hint: hint,
      parseErrorData: (v) {
        return Null;
      },
    ));
  }

  FlutterRustBridgeTaskConstMeta get kProgramRunConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "program_run",
        argNames: ["serProgramBytes", "argsStr"],
      );

  Future<Uint8List> programFromAtomBytes(
      {required Uint8List serProgramBytes, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(serProgramBytes);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_program_from_atom_bytes(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kProgramFromAtomBytesConstMeta,
      argValues: [serProgramBytes],
      hint: hint,
      parseErrorData: (v) {
        return Null;
      },
    ));
  }

  FlutterRustBridgeTaskConstMeta get kProgramFromAtomBytesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "program_from_atom_bytes",
        argNames: ["serProgramBytes"],
      );

  Future<Uint8List> programToAtomBytes(
      {required Uint8List serProgramBytes, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(serProgramBytes);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_program_to_atom_bytes(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kProgramToAtomBytesConstMeta,
      argValues: [serProgramBytes],
      hint: hint,
      parseErrorData: (v) {
        return Null;
      },
    ));
  }

  FlutterRustBridgeTaskConstMeta get kProgramToAtomBytesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "program_to_atom_bytes",
        argNames: ["serProgramBytes"],
      );

  Future<Uint8List> getPuzzleFromPublicKey(
      {required Uint8List pk, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(pk);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_puzzle_from_public_key(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kGetPuzzleFromPublicKeyConstMeta,
      argValues: [pk],
      hint: hint,
      parseErrorData: (v) {
        return Null;
      },
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetPuzzleFromPublicKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_puzzle_from_public_key",
        argNames: ["pk"],
      );

  Future<Uint8List> catsCreateCatPuzzle(
      {required Uint8List tailHash,
      required Uint8List innerPuzzleHash,
      dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(tailHash);
    var arg1 = _platform.api2wire_uint_8_list(innerPuzzleHash);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_cats_create_cat_puzzle(port_, arg0, arg1),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kCatsCreateCatPuzzleConstMeta,
      argValues: [tailHash, innerPuzzleHash],
      hint: hint,
      parseErrorData: (v) {
        return Null;
      },
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCatsCreateCatPuzzleConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "cats_create_cat_puzzle",
        argNames: ["tailHash", "innerPuzzleHash"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  ApiOutputProgram _wire2api_api_output_program(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ApiOutputProgram(
      program: _wire2api_uint_8_list(arr[0]),
      cost: _wire2api_u64(arr[1]),
    );
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  U8Array32 _wire2api_u8_array_32(dynamic raw) {
    return U8Array32(_wire2api_uint_8_list(raw));
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  UncurriedProgramToDart _wire2api_uncurried_program_to_dart(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return UncurriedProgramToDart(
      program: _wire2api_uint_8_list(arr[0]),
      args: _wire2api_StringList(arr[1]),
      error: _wire2api_String(arr[2]),
    );
  }
}

// Section: api2wire

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

@protected
int api2wire_usize(int raw) {
  return raw;
}
// Section: finalizer
