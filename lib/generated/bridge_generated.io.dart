// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.81.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';
import 'dart:ffi' as ffi;

class RustPlatform extends FlutterRustBridgeBase<RustWire> {
  RustPlatform(ffi.DynamicLibrary dylib) : super(RustWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_StringList> api2wire_StringList(List<String> raw) {
    final ans = inner.new_StringList_0(raw.length);
    for (var i = 0; i < raw.length; i++) {
      ans.ref.ptr[i] = api2wire_String(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<ffi.UintPtr> api2wire_box_autoadd_usize(int raw) {
    return inner.new_box_autoadd_usize_0(api2wire_usize(raw));
  }

  @protected
  ffi.Pointer<ffi.UintPtr> api2wire_opt_box_autoadd_usize(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_usize(raw);
  }

  @protected
  ffi.Pointer<wire_uint_32_list> api2wire_uint_32_list(Uint32List raw) {
    final ans = inner.new_uint_32_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: finalizer

// Section: api_fill_to_wire
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class RustWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void enforce_binding() {
    return _enforce_binding();
  }

  late final _enforce_bindingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('enforce_binding');
  late final _enforce_binding =
      _enforce_bindingPtr.asFunction<void Function()>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_secret_key_from_seed(
    int port_,
    ffi.Pointer<wire_uint_8_list> seed,
  ) {
    return _wire_secret_key_from_seed(
      port_,
      seed,
    );
  }

  late final _wire_secret_key_from_seedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_secret_key_from_seed');
  late final _wire_secret_key_from_seed = _wire_secret_key_from_seedPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_secret_key_public_key(
    int port_,
    ffi.Pointer<wire_uint_8_list> sk,
  ) {
    return _wire_secret_key_public_key(
      port_,
      sk,
    );
  }

  late final _wire_secret_key_public_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_secret_key_public_key');
  late final _wire_secret_key_public_key = _wire_secret_key_public_keyPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_secret_key_derive_path_hardened(
    int port_,
    ffi.Pointer<wire_uint_8_list> sk,
    ffi.Pointer<wire_uint_32_list> path,
  ) {
    return _wire_secret_key_derive_path_hardened(
      port_,
      sk,
      path,
    );
  }

  late final _wire_secret_key_derive_path_hardenedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_32_list>)>>(
      'wire_secret_key_derive_path_hardened');
  late final _wire_secret_key_derive_path_hardened =
      _wire_secret_key_derive_path_hardenedPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_32_list>)>();

  void wire_secret_key_derive_path_unhardened(
    int port_,
    ffi.Pointer<wire_uint_8_list> sk,
    ffi.Pointer<wire_uint_32_list> path,
  ) {
    return _wire_secret_key_derive_path_unhardened(
      port_,
      sk,
      path,
    );
  }

  late final _wire_secret_key_derive_path_unhardenedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_32_list>)>>(
      'wire_secret_key_derive_path_unhardened');
  late final _wire_secret_key_derive_path_unhardened =
      _wire_secret_key_derive_path_unhardenedPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_32_list>)>();

  void wire_public_key_derive_path_unhardened(
    int port_,
    ffi.Pointer<wire_uint_8_list> sk,
    ffi.Pointer<wire_uint_32_list> path,
  ) {
    return _wire_public_key_derive_path_unhardened(
      port_,
      sk,
      path,
    );
  }

  late final _wire_public_key_derive_path_unhardenedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_32_list>)>>(
      'wire_public_key_derive_path_unhardened');
  late final _wire_public_key_derive_path_unhardened =
      _wire_public_key_derive_path_unhardenedPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_32_list>)>();

  void wire_signature_sign(
    int port_,
    ffi.Pointer<wire_uint_8_list> sk,
    ffi.Pointer<wire_uint_8_list> msg,
  ) {
    return _wire_signature_sign(
      port_,
      sk,
      msg,
    );
  }

  late final _wire_signature_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_signature_sign');
  late final _wire_signature_sign = _wire_signature_signPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_signature_is_valid(
    int port_,
    ffi.Pointer<wire_uint_8_list> sig,
  ) {
    return _wire_signature_is_valid(
      port_,
      sig,
    );
  }

  late final _wire_signature_is_validPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_signature_is_valid');
  late final _wire_signature_is_valid = _wire_signature_is_validPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_signature_aggregate(
    int port_,
    ffi.Pointer<wire_uint_8_list> sigs_stream,
    int length,
  ) {
    return _wire_signature_aggregate(
      port_,
      sigs_stream,
      length,
    );
  }

  late final _wire_signature_aggregatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.UintPtr)>>('wire_signature_aggregate');
  late final _wire_signature_aggregate = _wire_signature_aggregatePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_signature_verify(
    int port_,
    ffi.Pointer<wire_uint_8_list> pk,
    ffi.Pointer<wire_uint_8_list> msg,
    ffi.Pointer<wire_uint_8_list> sig,
  ) {
    return _wire_signature_verify(
      port_,
      pk,
      msg,
      sig,
    );
  }

  late final _wire_signature_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_signature_verify');
  late final _wire_signature_verify = _wire_signature_verifyPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_pub_mnemonic_to_entropy(
    int port_,
    ffi.Pointer<wire_uint_8_list> mnemonic_words,
  ) {
    return _wire_pub_mnemonic_to_entropy(
      port_,
      mnemonic_words,
    );
  }

  late final _wire_pub_mnemonic_to_entropyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_pub_mnemonic_to_entropy');
  late final _wire_pub_mnemonic_to_entropy = _wire_pub_mnemonic_to_entropyPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_pub_entropy_to_mnemonic(
    int port_,
    ffi.Pointer<wire_uint_8_list> entropy,
  ) {
    return _wire_pub_entropy_to_mnemonic(
      port_,
      entropy,
    );
  }

  late final _wire_pub_entropy_to_mnemonicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_pub_entropy_to_mnemonic');
  late final _wire_pub_entropy_to_mnemonic = _wire_pub_entropy_to_mnemonicPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_pub_entropy_to_seed(
    int port_,
    ffi.Pointer<wire_uint_8_list> entropy,
  ) {
    return _wire_pub_entropy_to_seed(
      port_,
      entropy,
    );
  }

  late final _wire_pub_entropy_to_seedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_pub_entropy_to_seed');
  late final _wire_pub_entropy_to_seed = _wire_pub_entropy_to_seedPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_bytes_to_hex(
    int port_,
    ffi.Pointer<wire_uint_8_list> bytes,
  ) {
    return _wire_bytes_to_hex(
      port_,
      bytes,
    );
  }

  late final _wire_bytes_to_hexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_bytes_to_hex');
  late final _wire_bytes_to_hex = _wire_bytes_to_hexPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_hex_to_bytes(
    int port_,
    ffi.Pointer<wire_uint_8_list> hex,
  ) {
    return _wire_hex_to_bytes(
      port_,
      hex,
    );
  }

  late final _wire_hex_to_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_hex_to_bytes');
  late final _wire_hex_to_bytes = _wire_hex_to_bytesPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_bytes_to_sha256(
    int port_,
    ffi.Pointer<wire_uint_8_list> bytes,
  ) {
    return _wire_bytes_to_sha256(
      port_,
      bytes,
    );
  }

  late final _wire_bytes_to_sha256Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_bytes_to_sha256');
  late final _wire_bytes_to_sha256 = _wire_bytes_to_sha256Ptr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_pub_master_to_wallet_unhardened_intermediate(
    int port_,
    ffi.Pointer<wire_uint_8_list> master,
  ) {
    return _wire_pub_master_to_wallet_unhardened_intermediate(
      port_,
      master,
    );
  }

  late final _wire_pub_master_to_wallet_unhardened_intermediatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_pub_master_to_wallet_unhardened_intermediate');
  late final _wire_pub_master_to_wallet_unhardened_intermediate =
      _wire_pub_master_to_wallet_unhardened_intermediatePtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_pub_master_to_wallet_unhardened(
    int port_,
    ffi.Pointer<wire_uint_8_list> master,
    int idx,
  ) {
    return _wire_pub_master_to_wallet_unhardened(
      port_,
      master,
      idx,
    );
  }

  late final _wire_pub_master_to_wallet_unhardenedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32)>>('wire_pub_master_to_wallet_unhardened');
  late final _wire_pub_master_to_wallet_unhardened =
      _wire_pub_master_to_wallet_unhardenedPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_pub_master_to_wallet_hardened_intermediate(
    int port_,
    ffi.Pointer<wire_uint_8_list> master,
  ) {
    return _wire_pub_master_to_wallet_hardened_intermediate(
      port_,
      master,
    );
  }

  late final _wire_pub_master_to_wallet_hardened_intermediatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_pub_master_to_wallet_hardened_intermediate');
  late final _wire_pub_master_to_wallet_hardened_intermediate =
      _wire_pub_master_to_wallet_hardened_intermediatePtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_pub_master_to_wallet_hardened(
    int port_,
    ffi.Pointer<wire_uint_8_list> master,
    int idx,
  ) {
    return _wire_pub_master_to_wallet_hardened(
      port_,
      master,
      idx,
    );
  }

  late final _wire_pub_master_to_wallet_hardenedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32)>>('wire_pub_master_to_wallet_hardened');
  late final _wire_pub_master_to_wallet_hardened =
      _wire_pub_master_to_wallet_hardenedPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_pub_master_to_pool_singleton(
    int port_,
    ffi.Pointer<wire_uint_8_list> master,
    int pool_wallet_idx,
  ) {
    return _wire_pub_master_to_pool_singleton(
      port_,
      master,
      pool_wallet_idx,
    );
  }

  late final _wire_pub_master_to_pool_singletonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32)>>('wire_pub_master_to_pool_singleton');
  late final _wire_pub_master_to_pool_singleton =
      _wire_pub_master_to_pool_singletonPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_pub_master_to_pool_authentication(
    int port_,
    ffi.Pointer<wire_uint_8_list> sk,
    int pool_wallet_idx,
    int idx,
  ) {
    return _wire_pub_master_to_pool_authentication(
      port_,
      sk,
      pool_wallet_idx,
      idx,
    );
  }

  late final _wire_pub_master_to_pool_authenticationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32,
              ffi.Uint32)>>('wire_pub_master_to_pool_authentication');
  late final _wire_pub_master_to_pool_authentication =
      _wire_pub_master_to_pool_authenticationPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>, int, int)>();

  void wire_cmds_program_run(
    int port_,
    ffi.Pointer<wire_StringList> args,
  ) {
    return _wire_cmds_program_run(
      port_,
      args,
    );
  }

  late final _wire_cmds_program_runPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_StringList>)>>('wire_cmds_program_run');
  late final _wire_cmds_program_run = _wire_cmds_program_runPtr
      .asFunction<void Function(int, ffi.Pointer<wire_StringList>)>();

  void wire_cmds_program_brun(
    int port_,
    ffi.Pointer<wire_StringList> args,
  ) {
    return _wire_cmds_program_brun(
      port_,
      args,
    );
  }

  late final _wire_cmds_program_brunPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_StringList>)>>('wire_cmds_program_brun');
  late final _wire_cmds_program_brun = _wire_cmds_program_brunPtr
      .asFunction<void Function(int, ffi.Pointer<wire_StringList>)>();

  void wire_cmd_program_opc(
    int port_,
    ffi.Pointer<wire_StringList> args,
  ) {
    return _wire_cmd_program_opc(
      port_,
      args,
    );
  }

  late final _wire_cmd_program_opcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_StringList>)>>('wire_cmd_program_opc');
  late final _wire_cmd_program_opc = _wire_cmd_program_opcPtr
      .asFunction<void Function(int, ffi.Pointer<wire_StringList>)>();

  void wire_cmd_program_opd(
    int port_,
    ffi.Pointer<wire_StringList> args,
  ) {
    return _wire_cmd_program_opd(
      port_,
      args,
    );
  }

  late final _wire_cmd_program_opdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_StringList>)>>('wire_cmd_program_opd');
  late final _wire_cmd_program_opd = _wire_cmd_program_opdPtr
      .asFunction<void Function(int, ffi.Pointer<wire_StringList>)>();

  void wire_program_tree_hash(
    int port_,
    ffi.Pointer<wire_uint_8_list> ser_program_bytes,
  ) {
    return _wire_program_tree_hash(
      port_,
      ser_program_bytes,
    );
  }

  late final _wire_program_tree_hashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_program_tree_hash');
  late final _wire_program_tree_hash = _wire_program_tree_hashPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_program_curry(
    int port_,
    ffi.Pointer<wire_uint_8_list> ser_program_bytes,
    ffi.Pointer<wire_StringList> args_str,
  ) {
    return _wire_program_curry(
      port_,
      ser_program_bytes,
      args_str,
    );
  }

  late final _wire_program_curryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_StringList>)>>('wire_program_curry');
  late final _wire_program_curry = _wire_program_curryPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_StringList>)>();

  void wire_program_uncurry(
    int port_,
    ffi.Pointer<wire_uint_8_list> ser_program_bytes,
  ) {
    return _wire_program_uncurry(
      port_,
      ser_program_bytes,
    );
  }

  late final _wire_program_uncurryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_program_uncurry');
  late final _wire_program_uncurry = _wire_program_uncurryPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_program_from_list(
    int port_,
    ffi.Pointer<wire_StringList> program_list,
  ) {
    return _wire_program_from_list(
      port_,
      program_list,
    );
  }

  late final _wire_program_from_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_StringList>)>>('wire_program_from_list');
  late final _wire_program_from_list = _wire_program_from_listPtr
      .asFunction<void Function(int, ffi.Pointer<wire_StringList>)>();

  void wire_program_disassemble(
    int port_,
    ffi.Pointer<wire_uint_8_list> ser_program_bytes,
    ffi.Pointer<ffi.UintPtr> version,
  ) {
    return _wire_program_disassemble(
      port_,
      ser_program_bytes,
      version,
    );
  }

  late final _wire_program_disassemblePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<ffi.UintPtr>)>>('wire_program_disassemble');
  late final _wire_program_disassemble =
      _wire_program_disassemblePtr.asFunction<
          void Function(
              int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<ffi.UintPtr>)>();

  void wire_program_run(
    int port_,
    ffi.Pointer<wire_uint_8_list> ser_program_bytes,
    ffi.Pointer<wire_StringList> args_str,
  ) {
    return _wire_program_run(
      port_,
      ser_program_bytes,
      args_str,
    );
  }

  late final _wire_program_runPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_StringList>)>>('wire_program_run');
  late final _wire_program_run = _wire_program_runPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_StringList>)>();

  void wire_program_from_atom_bytes(
    int port_,
    ffi.Pointer<wire_uint_8_list> ser_program_bytes,
  ) {
    return _wire_program_from_atom_bytes(
      port_,
      ser_program_bytes,
    );
  }

  late final _wire_program_from_atom_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_program_from_atom_bytes');
  late final _wire_program_from_atom_bytes = _wire_program_from_atom_bytesPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_program_to_atom_bytes(
    int port_,
    ffi.Pointer<wire_uint_8_list> ser_program_bytes,
  ) {
    return _wire_program_to_atom_bytes(
      port_,
      ser_program_bytes,
    );
  }

  late final _wire_program_to_atom_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_program_to_atom_bytes');
  late final _wire_program_to_atom_bytes = _wire_program_to_atom_bytesPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_puzzle_from_public_key(
    int port_,
    ffi.Pointer<wire_uint_8_list> pk,
  ) {
    return _wire_get_puzzle_from_public_key(
      port_,
      pk,
    );
  }

  late final _wire_get_puzzle_from_public_keyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_get_puzzle_from_public_key');
  late final _wire_get_puzzle_from_public_key =
      _wire_get_puzzle_from_public_keyPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_cats_create_cat_puzzle(
    int port_,
    ffi.Pointer<wire_uint_8_list> tail_hash,
    ffi.Pointer<wire_uint_8_list> inner_puzzle_hash,
  ) {
    return _wire_cats_create_cat_puzzle(
      port_,
      tail_hash,
      inner_puzzle_hash,
    );
  }

  late final _wire_cats_create_cat_puzzlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_cats_create_cat_puzzle');
  late final _wire_cats_create_cat_puzzle =
      _wire_cats_create_cat_puzzlePtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_StringList> new_StringList_0(
    int len,
  ) {
    return _new_StringList_0(
      len,
    );
  }

  late final _new_StringList_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_StringList> Function(ffi.Int32)>>(
      'new_StringList_0');
  late final _new_StringList_0 = _new_StringList_0Ptr
      .asFunction<ffi.Pointer<wire_StringList> Function(int)>();

  ffi.Pointer<ffi.UintPtr> new_box_autoadd_usize_0(
    int value,
  ) {
    return _new_box_autoadd_usize_0(
      value,
    );
  }

  late final _new_box_autoadd_usize_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.UintPtr> Function(ffi.UintPtr)>>(
      'new_box_autoadd_usize_0');
  late final _new_box_autoadd_usize_0 = _new_box_autoadd_usize_0Ptr
      .asFunction<ffi.Pointer<ffi.UintPtr> Function(int)>();

  ffi.Pointer<wire_uint_32_list> new_uint_32_list_0(
    int len,
  ) {
    return _new_uint_32_list_0(
      len,
    );
  }

  late final _new_uint_32_list_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_uint_32_list> Function(ffi.Int32)>>(
      'new_uint_32_list_0');
  late final _new_uint_32_list_0 = _new_uint_32_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_32_list> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>(
      'new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_uint_32_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint32> ptr;

  @ffi.Int32()
  external int len;
}

class wire_StringList extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_uint_8_list>> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;

const int NUMBER_ZERO_BITS_PLOT_FILTER = 9;

const int INFINITE_COST = 9223372036854775807;
