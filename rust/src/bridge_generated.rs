#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.68.0.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_secret_key_from_seed_impl(port_: MessagePort, seed: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "secret_key_from_seed",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_seed = seed.wire2api();
            move |task_callback| Ok(secret_key_from_seed(api_seed))
        },
    )
}
fn wire_secret_key_public_key_impl(port_: MessagePort, sk: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "secret_key_public_key",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_sk = sk.wire2api();
            move |task_callback| Ok(secret_key_public_key(api_sk))
        },
    )
}
fn wire_secret_key_derive_path_hardened_impl(
    port_: MessagePort,
    sk: impl Wire2Api<Vec<u8>> + UnwindSafe,
    path: impl Wire2Api<Vec<u32>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "secret_key_derive_path_hardened",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_sk = sk.wire2api();
            let api_path = path.wire2api();
            move |task_callback| Ok(secret_key_derive_path_hardened(api_sk, api_path))
        },
    )
}
fn wire_secret_key_derive_path_unhardened_impl(
    port_: MessagePort,
    sk: impl Wire2Api<Vec<u8>> + UnwindSafe,
    path: impl Wire2Api<Vec<u32>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "secret_key_derive_path_unhardened",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_sk = sk.wire2api();
            let api_path = path.wire2api();
            move |task_callback| Ok(secret_key_derive_path_unhardened(api_sk, api_path))
        },
    )
}
fn wire_public_key_derive_path_unhardened_impl(
    port_: MessagePort,
    sk: impl Wire2Api<Vec<u8>> + UnwindSafe,
    path: impl Wire2Api<Vec<u32>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "public_key_derive_path_unhardened",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_sk = sk.wire2api();
            let api_path = path.wire2api();
            move |task_callback| Ok(public_key_derive_path_unhardened(api_sk, api_path))
        },
    )
}
fn wire_signature_sign_impl(
    port_: MessagePort,
    sk: impl Wire2Api<Vec<u8>> + UnwindSafe,
    msg: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "signature_sign",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_sk = sk.wire2api();
            let api_msg = msg.wire2api();
            move |task_callback| Ok(signature_sign(api_sk, api_msg))
        },
    )
}
fn wire_signature_is_valid_impl(port_: MessagePort, sig: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "signature_is_valid",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_sig = sig.wire2api();
            move |task_callback| Ok(signature_is_valid(api_sig))
        },
    )
}
fn wire_signature_aggregate_impl(
    port_: MessagePort,
    sigs_stream: impl Wire2Api<Vec<u8>> + UnwindSafe,
    length: impl Wire2Api<usize> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "signature_aggregate",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_sigs_stream = sigs_stream.wire2api();
            let api_length = length.wire2api();
            move |task_callback| Ok(signature_aggregate(api_sigs_stream, api_length))
        },
    )
}
fn wire_signature_verify_impl(
    port_: MessagePort,
    pk: impl Wire2Api<Vec<u8>> + UnwindSafe,
    msg: impl Wire2Api<Vec<u8>> + UnwindSafe,
    sig: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "signature_verify",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_pk = pk.wire2api();
            let api_msg = msg.wire2api();
            let api_sig = sig.wire2api();
            move |task_callback| Ok(signature_verify(api_pk, api_msg, api_sig))
        },
    )
}
fn wire_pub_mnemonic_to_entropy_impl(
    port_: MessagePort,
    mnemonic_words: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "pub_mnemonic_to_entropy",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_mnemonic_words = mnemonic_words.wire2api();
            move |task_callback| Ok(pub_mnemonic_to_entropy(api_mnemonic_words))
        },
    )
}
fn wire_pub_entropy_to_mnemonic_impl(
    port_: MessagePort,
    entropy: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "pub_entropy_to_mnemonic",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_entropy = entropy.wire2api();
            move |task_callback| Ok(pub_entropy_to_mnemonic(api_entropy))
        },
    )
}
fn wire_pub_entropy_to_seed_impl(port_: MessagePort, entropy: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "pub_entropy_to_seed",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_entropy = entropy.wire2api();
            move |task_callback| Ok(pub_entropy_to_seed(api_entropy))
        },
    )
}
fn wire_bytes_to_hex_impl(port_: MessagePort, bytes: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "bytes_to_hex",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_bytes = bytes.wire2api();
            move |task_callback| Ok(bytes_to_hex(api_bytes))
        },
    )
}
fn wire_hex_to_bytes_impl(port_: MessagePort, hex: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "hex_to_bytes",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_hex = hex.wire2api();
            move |task_callback| Ok(hex_to_bytes(api_hex))
        },
    )
}
fn wire_bytes_to_sha256_impl(port_: MessagePort, bytes: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "bytes_to_sha256",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_bytes = bytes.wire2api();
            move |task_callback| Ok(bytes_to_sha256(api_bytes))
        },
    )
}
fn wire_pub_master_to_wallet_unhardened_intermediate_impl(
    port_: MessagePort,
    master: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "pub_master_to_wallet_unhardened_intermediate",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_master = master.wire2api();
            move |task_callback| Ok(pub_master_to_wallet_unhardened_intermediate(api_master))
        },
    )
}
fn wire_pub_master_to_wallet_unhardened_impl(
    port_: MessagePort,
    master: impl Wire2Api<Vec<u8>> + UnwindSafe,
    idx: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "pub_master_to_wallet_unhardened",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_master = master.wire2api();
            let api_idx = idx.wire2api();
            move |task_callback| Ok(pub_master_to_wallet_unhardened(api_master, api_idx))
        },
    )
}
fn wire_pub_master_to_wallet_hardened_intermediate_impl(
    port_: MessagePort,
    master: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "pub_master_to_wallet_hardened_intermediate",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_master = master.wire2api();
            move |task_callback| Ok(pub_master_to_wallet_hardened_intermediate(api_master))
        },
    )
}
fn wire_pub_master_to_wallet_hardened_impl(
    port_: MessagePort,
    master: impl Wire2Api<Vec<u8>> + UnwindSafe,
    idx: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "pub_master_to_wallet_hardened",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_master = master.wire2api();
            let api_idx = idx.wire2api();
            move |task_callback| Ok(pub_master_to_wallet_hardened(api_master, api_idx))
        },
    )
}
fn wire_pub_master_to_pool_singleton_impl(
    port_: MessagePort,
    master: impl Wire2Api<Vec<u8>> + UnwindSafe,
    pool_wallet_idx: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "pub_master_to_pool_singleton",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_master = master.wire2api();
            let api_pool_wallet_idx = pool_wallet_idx.wire2api();
            move |task_callback| {
                Ok(pub_master_to_pool_singleton(
                    api_master,
                    api_pool_wallet_idx,
                ))
            }
        },
    )
}
fn wire_pub_master_to_pool_authentication_impl(
    port_: MessagePort,
    sk: impl Wire2Api<Vec<u8>> + UnwindSafe,
    pool_wallet_idx: impl Wire2Api<u32> + UnwindSafe,
    idx: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "pub_master_to_pool_authentication",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_sk = sk.wire2api();
            let api_pool_wallet_idx = pool_wallet_idx.wire2api();
            let api_idx = idx.wire2api();
            move |task_callback| {
                Ok(pub_master_to_pool_authentication(
                    api_sk,
                    api_pool_wallet_idx,
                    api_idx,
                ))
            }
        },
    )
}
fn wire_cmds_program_run_impl(port_: MessagePort, args: impl Wire2Api<Vec<String>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "cmds_program_run",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_args = args.wire2api();
            move |task_callback| Ok(cmds_program_run(api_args))
        },
    )
}
fn wire_cmds_program_brun_impl(port_: MessagePort, args: impl Wire2Api<Vec<String>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "cmds_program_brun",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_args = args.wire2api();
            move |task_callback| Ok(cmds_program_brun(api_args))
        },
    )
}
fn wire_cmd_program_opc_impl(port_: MessagePort, args: impl Wire2Api<Vec<String>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "cmd_program_opc",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_args = args.wire2api();
            move |task_callback| Ok(cmd_program_opc(api_args))
        },
    )
}
fn wire_cmd_program_opd_impl(port_: MessagePort, args: impl Wire2Api<Vec<String>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "cmd_program_opd",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_args = args.wire2api();
            move |task_callback| Ok(cmd_program_opd(api_args))
        },
    )
}
fn wire_cmd_program_cldb_impl(port_: MessagePort, args: impl Wire2Api<Vec<String>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "cmd_program_cldb",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_args = args.wire2api();
            move |task_callback| Ok(cmd_program_cldb(api_args))
        },
    )
}
fn wire_program_tree_hash_impl(
    port_: MessagePort,
    program_bytes: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "program_tree_hash",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_program_bytes = program_bytes.wire2api();
            move |task_callback| Ok(program_tree_hash(api_program_bytes))
        },
    )
}
fn wire_program_curry_impl(
    port_: MessagePort,
    program_bytes: impl Wire2Api<Vec<u8>> + UnwindSafe,
    args_str: impl Wire2Api<Vec<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "program_curry",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_program_bytes = program_bytes.wire2api();
            let api_args_str = args_str.wire2api();
            move |task_callback| Ok(program_curry(api_program_bytes, api_args_str))
        },
    )
}
fn wire_program_uncurry_impl(
    port_: MessagePort,
    program_bytes: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "program_uncurry",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_program_bytes = program_bytes.wire2api();
            move |task_callback| Ok(program_uncurry(api_program_bytes))
        },
    )
}
fn wire_program_from_list_impl(
    port_: MessagePort,
    program_list: impl Wire2Api<Vec<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "program_from_list",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_program_list = program_list.wire2api();
            move |task_callback| Ok(program_from_list(api_program_list))
        },
    )
}
fn wire_program_disassemble_impl(
    port_: MessagePort,
    program_bytes: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "program_disassemble",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_program_bytes = program_bytes.wire2api();
            move |task_callback| Ok(program_disassemble(api_program_bytes))
        },
    )
}
fn wire_program_run_impl(
    port_: MessagePort,
    program_bytes: impl Wire2Api<Vec<u8>> + UnwindSafe,
    args_str: impl Wire2Api<Vec<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "program_run",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_program_bytes = program_bytes.wire2api();
            let api_args_str = args_str.wire2api();
            move |task_callback| Ok(program_run(api_program_bytes, api_args_str))
        },
    )
}
fn wire_get_puzzle_from_public_key_impl(
    port_: MessagePort,
    pk: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_puzzle_from_public_key",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_pk = pk.wire2api();
            move |task_callback| Ok(get_puzzle_from_public_key(api_pk))
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

impl Wire2Api<usize> for usize {
    fn wire2api(self) -> usize {
        self
    }
}
// Section: impl IntoDart

impl support::IntoDart for ApiOutputProgram {
    fn into_dart(self) -> support::DartAbi {
        vec![self.program.into_dart(), self.cost.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ApiOutputProgram {}

impl support::IntoDart for UncurriedProgramToDart {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.program.into_dart(),
            self.args.into_dart(),
            self.error.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for UncurriedProgramToDart {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
